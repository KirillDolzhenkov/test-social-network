{"version":3,"sources":["assets/images/default_user_photo.png","components/common/FormControls/FormControls.module.css","utils/validator.ts","components/common/FormControls/FormControls.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","components/Profile/ContentArea/ContentArea.module.css","components/Profile/ContentArea/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHoocks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ContentArea/Post/PostContainer.tsx","components/Profile/ContentArea/Post/Post.tsx","components/Profile/ContentArea/ContentArea.tsx","components/Profile/ContentArea/ContentAreaContainer.tsx","components/Profile/Profile.tsx","selectors/profile-selectors.ts","components/Profile/ProfileClassContainer.tsx"],"names":["module","exports","requiredField","value","maxLengthCreator","maxValue","length","FormControl","input","meta","props","formControlValue","isError","touched","error","FormElement","className","styles","formControl","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","deactivateEditMode","onUpdateStatus","updateStatus","statusStaticMode","onDoubleClick","statusDefault","statusEditMode","autoFocus","onKeyPress","e","key","onChange","currentTarget","onClick","ProfileInfo","profile","descriptionBlock","src","photos","large","defaultSmallUserPhoto","alt","items","name","fullName","Preloader","PostContainer","connect","state","profilePage","dispatch","addLike","id","isLiked","removeLike","style","post","postMessage","message","reactions","likesCount","ContentArea","React","memo","addPost","postsElements","setNewPostText","posts","map","p","postBlock","PostMessageReduxForm","onSubmit","newPostText","maxLength3","reduxForm","form","handleSubmit","inputAreaElements","Field","placeholder","component","validate","ContentAreaContainer","Profile","isAuth","getProfileSL","getStatusSL","getIsAuthSL","auth","getAuthUserIdSL","ProfileClassContainer","userId","this","match","params","authUserId","to","PATH","LOGIN","getUserProfile","getUserStatus","updateUserStatus","Component","ProfileContainer","compose","withRouter"],"mappings":"wGAAe,QAA0B,gD,oBCCzCA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,yC,iCCDzH,oEACO,IAAMC,EAAgB,SAACC,GAC1B,IAAIA,EACJ,MAAO,qBAIEC,EAAmB,SAACC,GAC7B,OAAO,SAAUF,GACb,GAAIA,GAASA,EAAMG,OAASD,EAAU,MAAM,iBAAN,OAAwBA,EAAxB,e,uHCDvCE,EAAyC,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCAGrEC,EACAD,EADAC,iBAIEC,EAAUH,EAAKI,SAAWJ,EAAKK,MAC/BC,EAAcJ,EAEpB,OACI,sBAAKK,UAAYJ,GAAO,UAAOK,IAAOC,YAAd,YAA6BD,IAAOH,OAA5D,UACI,8BACI,cAACC,EAAD,2BAAiBP,GAAWE,MAE/BE,GAAW,+BAAOH,EAAKK,a,+ECnBrB,SAASK,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAG7B,QAETkB,GAAKM,EAAKrB,SAAWe,GAH8CO,GAAK,IAK9E,MAAOS,GACPR,GAAK,EACLC,EAAKO,EACL,QACA,IACOT,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAiB,EAAA,GAA2BlB,EAAKC,IGLjF,WACb,MAAM,IAAIkB,UAAU,6IHIgF,K,oBIJtGvC,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,MAAQ,2BAA2B,KAAO,0BAA0B,iBAAmB,sCAAsC,eAAiB,oCAAoC,cAAgB,qC,oBCA7QD,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,UAAY,+BAA+B,MAAQ,2BAA2B,kBAAoB,yC,oBCApHD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,YAAc,0BAA0B,KAAO,mBAAmB,QAAU,sBAAsB,UAAY,0B,wPCchLuC,EAA2D,SAAC9B,GAAU,MAGxC+B,oBAAkB,GAHsB,mBAGjEC,EAHiE,KAGvDC,EAHuD,OAI5CF,mBAAwB/B,EAAMkC,QAJc,mBAIjEA,EAJiE,KAIzDC,EAJyD,KAOxEC,qBAAU,WACND,EAAUnC,EAAMkC,UAClB,CAAClC,EAAMkC,SAGT,IAGMG,EAAqB,WACvBJ,GAAY,GACZK,KAcEA,EAAiB,WACfJ,EACAlC,EAAMuC,aAAaL,GAEnBlC,EAAMuC,aAAa,KAW3B,OACI,sCAESP,GACD,8BACI,qBAAK1B,UAAWC,IAAOiC,iBAAkBC,cAvChC,WACrBR,GAAY,IAsCA,SACIjC,EAAMkC,OACAlC,EAAMkC,OACN,qBAAK5B,UAAS,UAAKC,IAAOiC,iBAAZ,YAAgCjC,IAAOmC,eAArD,SAAuE,mBAMrFV,GACA,sBAAK1B,UAAS,UAAKC,IAAOoC,gBAA1B,UACI,8BACI,uBACIC,WAAS,EAETC,WA/CE,SAACC,GACT,UAAVA,EAAEC,KACFV,KA8CgB5C,MAAK,UAAKyC,GACVc,SA1CD,SAACF,GACpBX,EAAUW,EAAEG,cAAcxD,YA4Cd,8BACI,wBACIyD,QAASb,EADb,2BCtElBc,EAA8C,SAACnD,GAAW,IAGxDoD,EAGApD,EAHAoD,QACAlB,EAEAlC,EAFAkC,OACAK,EACAvC,EADAuC,aAIJ,OAAKa,EASD,8BACI,sBAAK9C,UAAWC,IAAO8C,iBAAvB,UAEI,qBAAKC,IACyB,QAAnB,OAAPF,QAAO,IAAPA,OAAA,EAAAA,EAASG,OAAOC,OAAhB,OACMJ,QADN,IACMA,OADN,EACMA,EAASG,OAAOC,MAChBC,IACRC,IAAK,mBAEP,sBAAKpD,UAAWC,IAAOoD,MAAvB,UACI,qBAAKrD,UAAWC,IAAOqD,KAAvB,SACI,mCAAIR,QAAJ,IAAIA,OAAJ,EAAIA,EAASS,aAEjB,cAAC,EAAD,CACItB,aAAcA,EACdL,OAAQA,YAtBpB,8BACI,cAAC4B,EAAA,EAAD,O,sDCKVC,EAAgBC,aAjBE,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAGA,SAACC,GACxB,MAAO,CACHC,QAAS,SAACC,EAAYC,GAClBH,EAASC,YAAQC,EAAIC,KAEzBC,WAAY,SAACF,EAAYC,GACrBH,EAASI,YAAWF,EAAIC,QAMdN,EClBgB,SAAChE,GAEnC,OACI,qCACI,uBACA,sBAAKM,UAAWkE,IAAMC,KAAtB,UACI,sBAAKnE,UAAWkE,IAAMb,MAAtB,UACI,8BAEI,qBAAKL,IAAKG,IAAuBC,IAAI,4BAOzC,sBAAKpD,UAAWkE,IAAME,YAAtB,UACI,sBAAKpE,UAAWkE,IAAMZ,KAAtB,UACI,8BAAI,WAAJ,OADJ,OAGA,qBAAKtD,UAAWkE,IAAMG,QAAtB,SACI,8BAAM3E,EAAM2E,kBAIxB,sBAAKrE,UAAWkE,IAAMI,UAAtB,UACI,8BAEQ5E,EAAMsE,QACA,yBAAQpB,QAAS,WACflD,EAAMuE,WAAWvE,EAAMqE,GAAIrE,EAAMsE,UADnC,yBAEStE,EAAM6E,cAEjB,yBAAQ3B,QAAS,WACblD,EAAMoE,QAAQpE,EAAMqE,GAAIrE,EAAMsE,UADlC,wBAEUtE,EAAM6E,gBAG5B,oCAAM,oDAAN,OACA,oCAAM,4CAAN,mB,kBClCdC,EAA8CC,IAAMC,MAAK,SAAChF,GAAU,IAOlEkE,EAGAlE,EAHAkE,YACAe,EAEAjF,EAFAiF,QAIAC,GAFAlF,EADAmF,eAGgBjB,EAAYkB,MAAMC,KAAI,SAAAC,GAAC,OACvC,cAACvB,EAAD,CAEIY,QAASW,EAAEX,QACXN,GAAIiB,EAAEjB,GACNQ,WAAYS,EAAET,WACdP,QAASgB,EAAEhB,SAJNgB,EAAEjB,QAcf,OACI,sBAAK/D,UAAWC,IAAOgF,UAAvB,UACI,cAACC,EAAD,CAAsBC,SARP,SAAChG,GAChBA,EAAMiG,aACNT,EAAQxF,EAAMiG,gBAOd,qBAAKpF,UAAWC,IAAO6E,MAAvB,SAEQF,UAOdS,EAAajG,YAAiB,GA2B9B8F,EAAuBI,YAA8B,CAACC,KAAM,wBAArCD,EAzB0B,SAAC5F,GAAW,IAG3D8F,EACA9F,EADA8F,aAGJ,OACI,uBAAML,SAAUK,EAAcxF,UAAWC,IAAOwF,kBAAhD,UACI,8BACI,cAACC,EAAA,EAAD,CACIC,YAAa,cACbrC,KAAM,cACNsC,UAAWrG,IACXI,iBAAkB,WAClBkG,SAAU,CAAC3G,IAAemG,OAGlC,8BACI,kDC1DVS,EAAuBpC,aAPL,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,eAK0F,CACjHe,YACAE,oBAFyBnB,CAG1Bc,GCRGuB,EAAsC,SAACrG,GAAW,IAGhDoD,EAIApD,EAJAoD,QACAlB,EAGAlC,EAHAkC,OACAK,EAEAvC,EAFAuC,aAEAvC,EADAsG,OAQJ,OACI,sBAAKhG,UAAWC,IAAO6C,QAAvB,UACI,cAAC,EAAD,CACIA,QAASA,EACTlB,OAAQA,EACRK,aAAcA,IAElB,cAAC6D,EAAD,QCrCCG,EAAe,SAACtC,GACzB,OAAOA,EAAMC,YAAYd,SAEhBoD,EAAc,SAACvC,GACxB,OAAQA,EAAMC,YAAYhC,QAGjBuE,EAAc,SAACxC,GACxB,OAAOA,EAAMyC,KAAKJ,QAGTK,EAAkB,SAAC1C,GAC5B,OAAOA,EAAMyC,KAAKrC,I,QC0BhBuC,E,uKAEF,WAEI,IAAIC,EAAiBC,KAAK9G,MAAM+G,MAAMC,OAAOH,OAE7C,IAAKA,KACDA,EAAM,UAAMC,KAAK9G,MAAMiH,aAGnB,OAAO,cAAC,IAAD,CAAUC,GAAIC,IAAKC,QAG9BP,IAEAC,KAAK9G,MAAMqH,gBAAgBR,GAC3BC,KAAK9G,MAAMsH,eAAeT,M,oBAIlC,WACI,OAAO,mCAYH,cAAC,EAAD,2BACQC,KAAK9G,OADb,IAEIoD,QAAS0D,KAAK9G,MAAMoD,QACpBlB,OAAQ4E,KAAK9G,MAAMkC,OACnBK,aAAcuE,KAAK9G,MAAMuH,0B,GArCLxC,IAAMyC,WA4CpCC,EAAmBC,YACrB1D,aAvDoB,SAACC,GACrB,MAAO,CACHb,QAASmD,EAAatC,GACtB/B,OAAQsE,EAAYvC,GACpBqC,OAAQG,EAAYxC,GACpBgD,WAAYN,EAAgB1C,MAmDX,CACboD,mBACAC,kBACAC,uBAGRI,IARqBD,CASvBd","file":"static/js/4.6a5e8f26.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/default_user_photo.5364f1ba.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__1PKUq\",\"error\":\"FormControls_error__3kHja\",\"formSummaryError\":\"FormControls_formSummaryError__2VRhK\"};","//checking that а field are not empty:\r\nexport const requiredField = (value: any) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\n//checking that а field has not much length than required:\r\nexport const maxLengthCreator = (maxValue: any) => {\r\n    return function (value: any) {\r\n        if (value && value.length > maxValue) return `Max length is ${maxValue} symbols`;\r\n        return undefined;\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nimport styles from \"./FormControls.module.css\"\r\n\r\n//types:\r\ntype FormControlType = { input: any, meta: any, formControlValue: string} //need to fix any fnd check types!!! (meta has: touched, error...)\r\n\r\n//functional component:\r\nconst  FormControl: React.FC<FormControlType> = ({input, meta, ...props}) => {\r\n\r\n    const {\r\n        formControlValue,\r\n    } = props;\r\n\r\n    //if field is touched activate error\r\n    const isError = meta.touched && meta.error;\r\n    const FormElement = formControlValue;\r\n\r\n    return (\r\n        <div className={ isError && `${styles.formControl} ${styles.error}`}>\r\n            <div>\r\n                <FormElement {...input} {...props}/>\r\n            </div>\r\n            {isError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    FormControl\r\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1o5hr\",\"items\":\"ProfileInfo_items__Tow0c\",\"name\":\"ProfileInfo_name__3_29G\",\"statusStaticMode\":\"ProfileInfo_statusStaticMode__1JGsp\",\"statusEditMode\":\"ProfileInfo_statusEditMode__2KjhT\",\"statusDefault\":\"ProfileInfo_statusDefault__tIH07\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1LESU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"ContentArea_postBlock__2Fp-K\",\"posts\":\"ContentArea_posts__3qIIz\",\"inputAreaElements\":\"ContentArea_inputAreaElements__ijd0W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__L3g4m\",\"items\":\"Post_items__TiuHf\",\"postMessage\":\"Post_postMessage__2R7XL\",\"name\":\"Post_name__7buCm\",\"message\":\"Post_message__1YmDS\",\"reactions\":\"Post_reactions__3uWF0\"};","import React, {useEffect, useState} from \"react\";\n\nimport styles from \"./ProfileInfo.module.css\"\n\n//types:\ntype ProfileStatusPropsType = {\n    status: string | null\n    updateStatus: (status: string) => void\n}\ntype LocalStateType = {\n    editMode: boolean\n    status: string | null\n}\n\n//class component:\nconst ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\n\n    //localState for status:\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [status, setStatus] = useState<string | null>(props.status);\n\n    //re-rendering of status's local state if its props have changed\n    useEffect(()=>{\n        setStatus(props.status);\n    },[props.status])\n\n    //on&off edit mode of status:\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        onUpdateStatus();\n    }\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            deactivateEditMode();\n        }\n    }\n\n    //onchange localState of status:\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    //update status callback  function from local state to global state:\n    const onUpdateStatus = () => {\n        if (status) {\n            props.updateStatus(status);\n        } else {\n            props.updateStatus('');\n        }\n    }\n\n    /*//re-rendering of status's local state if its props have changed:\n    componentDidUpdate(prevProps: ProfileStatusPropsType, prevState: any) { //need to check types!!!\n        if (prevProps.status !== this.props.status){\n            this.setState({status: this.props.status});\n        }\n    }*/\n\n    return (\n        <>\n            {\n                !editMode &&\n                <div>\n                    <div className={styles.statusStaticMode} onDoubleClick={activateEditMode}>{\n                        props.status\n                            ? props.status\n                            : <div className={`${styles.statusStaticMode} ${styles.statusDefault}`}>{\"set status\"}</div>\n                    }</div>\n                </div>\n            }\n\n            {\n                editMode &&\n                <div className={`${styles.statusEditMode}`}>\n                    <div>\n                        <input\n                            autoFocus\n                            /*onBlur={this.deactivateEditMode}*/\n                            onKeyPress={onKeyPressHandler}\n                            value={`${status}`}\n                            onChange={onStatusChange}\n                        />\n                    </div>\n                    <div>\n                        <button\n                            onClick={deactivateEditMode}\n                        >save\n                        </button>\n                    </div>\n                </div>\n            }\n\n        </>\n    )\n\n}\n\nexport {\n    ProfileStatusWithHooks\n}","import React from \"react\";\n\nimport defaultSmallUserPhoto from \"../../../assets/images/default_user_photo.png\";\nimport { Preloader } from \"../../common/Preloader/Preloader\";\nimport { ProfilePageType } from \"../../../redux/profile-reducer\";\nimport styles from \"./ProfileInfo.module.css\";\nimport {ProfileStatus} from \"./ProfileStatus\";\nimport { ProfileStatusWithHooks } from \"./ProfileStatusWithHoocks\";\n\n//types:\ntype  ProfileInfoPropsType = {\n    profile: ProfilePageType | null\n    status: string | null\n    updateStatus: (status: string) => void\n}\n\n//functional component:\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = (props) => {\n\n    const {\n        profile,\n        status,\n        updateStatus,\n    } = props;\n\n    //user would see preloader while response has not confirmed: // added to profileContainer\n    if (!profile) {\n        return (\n            <div>\n                <Preloader/>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <div className={styles.descriptionBlock}>\n\n                <img src={\n                    profile?.photos.large !== null\n                        ? profile?.photos.large\n                        : defaultSmallUserPhoto //defaultAsset\n                } alt={\"smallUserPhoto\"}/>\n\n                <div className={styles.items}>\n                    <div className={styles.name}>\n                        <b>{profile?.fullName}</b>\n                    </div>\n                    <ProfileStatusWithHooks\n                        updateStatus={updateStatus}\n                        status={status}\n                    />\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport {\n    ProfileInfo\n}","import {Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\n\nimport {AppStateType} from \"../../../../redux/redux-store\";\nimport {addLike, ProfileInitialStateType, removeLike} from \"../../../../redux/profile-reducer\";\nimport {Post} from \"./Post\";\n\n//types:\ntype mapStateToPropsType = {\n    profilePage: ProfileInitialStateType\n}\ntype mapDispatchToPropsType = {\n    addLike: (id: number, isLiked: boolean) => void\n    removeLike: (id: number, isLiked: boolean) => void\n}\n\n//container component:\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        profilePage: state.profilePage\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        addLike: (id: number, isLiked: boolean)=>{\n            dispatch(addLike(id, isLiked));\n        },\n        removeLike: (id: number, isLiked: boolean)=> {\n            dispatch(removeLike(id, isLiked));\n        }\n    }\n}\n\n//HOC:\nconst PostContainer = connect(mapStateToProps,mapDispatchToProps)(Post);\n\nexport {\n    PostContainer\n}","import React from \"react\";\n\nimport style from \"./Post.module.css\"\nimport defaultSmallUserPhoto from \"../../../../assets/images/default_user_photo.png\"\n\n//types:\ntype PostPropsType = {\n    id: number\n    message: string\n    likesCount: number\n    isLiked: boolean\n    addLike: (id: number, isLiked: boolean) => void\n    removeLike: (id: number, isLiked: boolean) => void\n}\n\n//functional component:\nconst Post: React.FC<PostPropsType> = (props) => {\n\n    return (\n        <>\n            <hr/>\n            <div className={style.post}>\n                <div className={style.items}>\n                    <div>\n                        {/*need to fix: */}\n                        <img src={defaultSmallUserPhoto} alt=\"defaultSmallUserPhoto\"/>\n                        {/* <img src={\n                        u.photos.small !== null\n                            ? u.photos.small\n                            : defaultSmallUserPhoto //defaultAsset\n                    } alt=\"defaultSmallUserPhoto\"/>*/}\n                    </div>\n                    <div className={style.postMessage}>\n                        <div className={style.name}>\n                            <b>{\"UserName\"} </b> {/*<-- props.UserName !!!*/}\n                        </div>\n                        <div className={style.message}>\n                            <div>{props.message}</div>\n                        </div>\n                    </div>\n                </div>\n                <div className={style.reactions}>\n                    <div>\n                        {\n                            props.isLiked\n                                ? <button onClick={() => {\n                                    props.removeLike(props.id, props.isLiked);\n                                }}>Liked ♥{props.likesCount}</button>\n                                :\n                                <button onClick={() => {\n                                    props.addLike(props.id, props.isLiked);\n                                }}>Like ♡{props.likesCount}</button>\n                        }\n                    </div>\n                    <div> <button> Write comment</button> </div>\n                    <div> <button> Share</button> </div>\n                </div>\n            </div>\n\n        </>\n    )\n}\n\nexport {\n    Post\n}","import React from \"react\";\nimport {Field, reduxForm} from \"redux-form\";\n\nimport styles from \"./ContentArea.module.css\"\nimport {ProfileInitialStateType} from \"../../../redux/profile-reducer\";\nimport {PostContainer} from \"./Post/PostContainer\";\nimport {maxLengthCreator, requiredField} from \"../../../utils/validator\";\nimport {FormControl} from \"../../common/FormControls/FormControls\";\n\n//types:\ntype confPropsType = {\n    form: string;\n}\ntype PostMessageFormType = any //need to fix any!!!\ntype ContentAreaPropsType = {\n    profilePage: ProfileInitialStateType\n    addPost: (newPostText: string) => void\n    setNewPostText: (newText: string) => void\n}\n\n//functional component:\nconst ContentArea: React.FC<ContentAreaPropsType> = React.memo((props) => {\n\n    /*shouldComponentUpdate(nextProps: Readonly<ContentAreaPropsType>, nextState: Readonly<{}>): boolean {\n        return nextProps !== this.props || nextState !== this.state\n    }*/\n\n    const {\n        profilePage,\n        addPost,\n        setNewPostText, //need to delete\n    } = props;\n\n    let postsElements = profilePage.posts.map(p =>\n        <PostContainer\n            key={p.id}\n            message={p.message}\n            id={p.id}\n            likesCount={p.likesCount}\n            isLiked={p.isLiked}\n        />\n    )\n\n    const addPostHandler = (value: any) => { //need to fix any!!!\n        if (value.newPostText) {\n            addPost(value.newPostText);\n        }\n    }\n\n    return (\n        <div className={styles.postBlock}>\n            <PostMessageReduxForm onSubmit={addPostHandler}/>\n            <div className={styles.posts}>\n                {\n                    postsElements\n                }\n            </div>\n        </div>\n    );\n})\n\nconst maxLength3 = maxLengthCreator(3);//test value!!!\n\nconst PostMessageForm: React.FC<PostMessageFormType> = (props) => {\n\n    const {\n        handleSubmit,\n    } = props;\n\n    return (\n        <form onSubmit={handleSubmit} className={styles.inputAreaElements}>\n            <div>\n                <Field\n                    placeholder={\"What's new?\"}\n                    name={\"newPostText\"}\n                    component={FormControl}\n                    formControlValue={\"textarea\"}\n                    validate={[requiredField, maxLength3]}\n                />\n            </div>\n            <div>\n                <button>Post</button>\n            </div>\n        </form>\n    );\n}\n\n//reduxForm HOC:\nconst PostMessageReduxForm = reduxForm<confPropsType, any>({form: 'postMessageReduxForm'})(PostMessageForm); //need to check types!!!\n\nexport {\n    ContentArea\n}","import {connect} from \"react-redux\";\n\nimport {ContentArea} from \"./ContentArea\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {addPost, ProfileInitialStateType, setNewPostText} from \"../../../redux/profile-reducer\";\n\n//types:\ntype mapStateToPropsType = {\n    profilePage: ProfileInitialStateType\n}\ntype mapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n    setNewPostText: (newText: string) => void\n}\n\n//container component:\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        profilePage: state.profilePage\n    }\n}\n\n//HOC:\nconst ContentAreaContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\n    addPost,\n    setNewPostText\n})(ContentArea);\n\nexport {\n    ContentAreaContainer\n}","import React from \"react\";\n\nimport styles from \"./Profile.module.css\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {ContentAreaContainer} from \"./ContentArea/ContentAreaContainer\";\nimport {ProfilePageType} from \"../../redux/profile-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {PATH} from \"../../App\";\n\n//types:\ntype ProfilePropsType = {\n    profile: ProfilePageType | null\n    status: string | null\n    updateStatus: (status: string) => void\n    isAuth: boolean\n}\n\n//functional component:\nconst Profile: React.FC<ProfilePropsType> = (props) => {\n\n    const {\n        profile,\n        status,\n        updateStatus,\n        isAuth,\n    } = props;\n\n    //redirect users to loginPage after logout:\n    if (!isAuth){\n        /*return <Redirect to={PATH.LOGIN}/>*/\n    }\n\n    return (\n        <div className={styles.profile}>\n            <ProfileInfo\n                profile={profile}\n                status={status}\n                updateStatus={updateStatus}\n            />\n            <ContentAreaContainer/>\n        </div>\n    )\n}\n\nexport {\n    Profile\n}","import {AppStateType} from \"../redux/redux-store\";\r\n\r\nexport const getProfileSL = (state: AppStateType) => {\r\n    return state.profilePage.profile\r\n}\r\nexport const getStatusSL = (state: AppStateType) => {\r\n    return  state.profilePage.status\r\n}\r\n\r\nexport const getIsAuthSL = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const getAuthUserIdSL = (state: AppStateType) => {\r\n    return state.auth.id\r\n}\r\n","import React from \"react\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\n\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {getUserProfile, getUserStatus, ProfilePageType, updateUserStatus} from \"../../redux/profile-reducer\";\nimport {Profile} from \"./Profile\";\nimport {getAuthUserIdSL, getIsAuthSL, getProfileSL, getStatusSL} from \"../../selectors/profile-selectors\";\nimport {PATH} from \"../../App\";\n\n//types:\ntype mapStateToPropsType = {\n    profile: ProfilePageType | null\n    status: string | null\n    isAuth: boolean\n    authUserId: number | null  // number or string ???\n}\ntype mapDispatchToPropsType = {\n    getUserProfile: (userId: number) => void\n    getUserStatus: (userId: number) => void\n    updateUserStatus: (status: string) => void\n}\ntype  PathParamsType = {\n    userId: string //need string\n}\ntype ProfileClassContainerPropsType = mapStateToPropsType\n    & mapDispatchToPropsType\n    & RouteComponentProps<PathParamsType> //.props.match.params FIX\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        profile: getProfileSL(state),\n        status: getStatusSL(state),\n        isAuth: getIsAuthSL(state),\n        authUserId: getAuthUserIdSL(state),\n    }\n}\n\n//class container component:\nclass ProfileClassContainer extends React.Component<ProfileClassContainerPropsType> {\n\n    componentDidMount() {\n        //profile userId:\n        let userId: string = this.props.match.params.userId;\n\n        if (!userId) {\n            userId = `${this.props.authUserId}`\n            if (!userId) {\n                //this.props.history.push('/login'); //test method?!\n                return <Redirect to={PATH.LOGIN}/>\n            }\n        }\n        if (userId) {\n            //usersAPI.getProfile() & profileAPI.getUserStatus() responses, (\"+\" symbol for to string):\n            this.props.getUserProfile(+userId);\n            this.props.getUserStatus(+userId);\n        }\n    }\n\n    render() {\n        return <>\n            {/*{\n                this.props.profile\n                    ? <Profile\n                        {...this.props}\n                        profile={this.props.profile}\n                        status={this.props.status}\n                        updateStatus={this.props.updateUserStatus}\n                    />\n                    //user would see preloader while response has not confirmed:\n                    : <Preloader/> //need to delete this from profileInfo?\n            }*/}\n            <Profile\n                {...this.props}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateStatus={this.props.updateUserStatus}\n            />\n        </>\n    }\n}\n\n//HOC:\nconst ProfileContainer = compose<React.FC>(\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(\n        mapStateToProps, {\n            getUserProfile,\n            getUserStatus,\n            updateUserStatus,\n        }\n    ),\n    withRouter,\n)(ProfileClassContainer);\n\nexport {\n    ProfileContainer\n}\n\n"],"sourceRoot":""}