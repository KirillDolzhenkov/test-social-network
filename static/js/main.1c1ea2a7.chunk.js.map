{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Profile/ContentArea/ContentArea.module.css","components/Users/Users.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ContentArea/Post/Post.module.css","components/Navbar/Navbar.module.css","reportWebVitals.ts","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.tsx","components/Profile/ContentArea/Post/PostContainer.tsx","components/Profile/ContentArea/Post/Post.tsx","components/Profile/ContentArea/ContentAreaContainer.tsx","components/Profile/ContentArea/ContentArea.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","redux/dialogs-reducer.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Settings/Settings.tsx","redux/users-reducer.tsx"," assets/images/defaultSmallUserPhoto.png","components/Users/UsersClassComponent.tsx","components/Users/UsersContainer.tsx","App.tsx","redux/redux-store.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","props","className","styles","header","Navbar","navbar","item","to","activeClassName","active","ProfileInfo","src","alt","descriptionBlock","initialState","posts","id","message","likesCount","isLiked","newPostText","PostContainer","connect","state","profilePage","dispatch","addLike","type","AddLikeAC","removeLike","RemoveLikeAC","items","onClick","ContentAreaContainer","addPost","newPost","updateNewPostText","newText","SetNewPostTextAC","postsElements","map","p","addPostHandler","postBlock","value","maxLength","onChange","e","currentTarget","placeholder","onKeyPress","key","preventDefault","Profile","profile","DialogItem","dialog","name","Message","dialogs","messages","newMessageText","DialogsContainer","dialogsPage","dialogPage","sendMessage","newMessage","updateNewMessageText","SetNewMessageTextAC","dialogElements","d","messageElements","m","addMessageHandler","trim","Music","News","Settings","users","pageSize","totalUsersCount","currentPage","UsersClassComponent","onPageChanged","pageNumber","setCurrentPage","axios","get","response","setUsers","data","this","setTotalUsersCount","totalCount","usersPage","pagesCount","Math","ceil","pages","i","push","selectedPage","u","photos","small","defaultSmallUserPhoto","style","textDecoration","color","followed","unFollow","follow","location","country","city","React","Component","UsersContainer","FollowAC","UnFollowAC","SetUsersAC","SetTotalUsersCountAC","App","path","render","rootReducer","combineReducers","action","stateCopy","floor","Date","valueOf","random","store","createStore","reRenderEntireThree","ReactDOM","StrictMode","document","getElementById","getState","subscribe"],"mappings":"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","file":"static/js/main.1c1ea2a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsPage\":\"Dialogs_dialogsPage__2-zGa\",\"dialogs\":\"Dialogs_dialogs__3K-Xy\",\"dialog\":\"Dialogs_dialog__ZEC-O\",\"messages\":\"Dialogs_messages__3kr4z\",\"message\":\"Dialogs_message__nXIdA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"ContentArea_postBlock__3Ivjo\",\"posts\":\"ContentArea_posts__2_nbj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"items\":\"Users_items__sAzYH\",\"selectedPage\":\"Users_selectedPage__UEP4h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__WdcwP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1_i-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"items\":\"Post_items__1-enr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__3S2BG\",\"item\":\"Navbar_item__k2Crj\",\"active\":\"Navbar_active__28fRt\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport styles from \"./Header.module.css\";\r\n\r\n//types:\r\ntype HeaderPropsType = {}\r\n\r\n//function component:\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    return (\r\n        <div className={styles.header}>\r\n            Header\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Header\r\n}","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styles from \"./Navbar.module.css\";\r\n\r\n//types:\r\ntype NavbarPropsType = {}\r\n\r\n//function component:\r\nconst Navbar: React.FC<NavbarPropsType> = (props) => {\r\n    return (\r\n        <div className={styles.navbar}>\r\n            <div className={styles.item}>\r\n                <NavLink to={\"/Profile\"} activeClassName={styles.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={styles.item}>\r\n                <NavLink to={\"/Dialogs\"} activeClassName={styles.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={styles.item}>\r\n                <NavLink to={\"/Users\"} activeClassName={styles.active}>Users</NavLink>\r\n            </div>\r\n            <div className={styles.item}>\r\n                <NavLink to={\"/News\"} activeClassName={styles.active}>News</NavLink>\r\n            </div>\r\n            <div className={styles.item}>\r\n                <NavLink to={\"/Music\"} activeClassName={styles.active}>Music</NavLink>\r\n            </div>\r\n            <div className={styles.item}>\r\n                <NavLink to={\"/Settings\"} activeClassName={styles.active}>Settings</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Navbar\r\n}","import React from \"react\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\n\r\n//types:\r\ntype  ProfileInfoPropsType = {}\r\n\r\n//function component:\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src=\"https://i.redd.it/om4a8r7glhx21.png\" alt=\"\"/>\r\n            </div>\r\n            <div className={styles.descriptionBlock}>\r\n                Ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    ProfileInfo\r\n}","import {ActionType} from \"./redux-store\";\r\n\r\n//types:\r\nexport type PostsDataType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n    isLiked: boolean\r\n}\r\nexport type ProfileInitialStateType = {\r\n    posts: Array<PostsDataType>\r\n    newPostText: string\r\n}\r\n\r\n//initialState:\r\nconst initialState: ProfileInitialStateType = {\r\n    posts: [\r\n        {id: 1, message: \"Hi dude\", likesCount: 2, isLiked: false},\r\n        {id: 2, message: \"nice photos!\", likesCount: 1, isLiked: false},\r\n    ],\r\n    newPostText: \"\"\r\n}\r\n\r\n//reducer:\r\nconst profileReducer = (state: ProfileInitialStateType = initialState, action: ActionType) => {\r\n    if (action.type === \"SN/PROFILE/ADD_POST\") {\r\n        const stateCopy = {...state}\r\n        const newPost: PostsDataType = {\r\n            id: Math.floor(new Date().valueOf() * Math.random()), //Create a unique number with javascript time\r\n            message: state.newPostText,\r\n            likesCount: 0,\r\n            isLiked: false\r\n        };\r\n        stateCopy.posts = [newPost,...state.posts];\r\n        stateCopy.newPostText = \"\";\r\n        return stateCopy;\r\n    } else if (action.type === \"SN/PROFILE/SET_NEW_POST_TEXT\") {\r\n        const stateCopy = {...state};\r\n        stateCopy.newPostText = action.newText;\r\n        return stateCopy;\r\n    } else if (action.type === \"SN/PROFILE/ADD_LIKE\") {\r\n        const stateCopy = {\r\n            ...state, posts: state.posts.map(p => {\r\n                if (p.id === action.id) {\r\n                    return {...p, isLiked: true, likesCount: p.likesCount + 1}\r\n                }\r\n                return p;\r\n            })\r\n        }\r\n        return stateCopy;\r\n    } else if (action.type === \"SN/PROFILE/REMOVE_LIKE\") {\r\n        const stateCopy = {\r\n            ...state, posts: state.posts.map(p => {\r\n                if (p.id === action.id) {\r\n                    return {...p, isLiked: false, likesCount: p.likesCount - 1}\r\n                }\r\n                return p;\r\n            })\r\n        }\r\n        return stateCopy;\r\n    }else {\r\n        return state;\r\n    }\r\n}\r\n\r\n//action creators:\r\nexport const AddPostAC = (newPost: string) => {\r\n    return {type: \"SN/PROFILE/ADD_POST\", newPost} as const\r\n}\r\nexport const SetNewPostTextAC = (newText: string) => {\r\n    return {type: \"SN/PROFILE/SET_NEW_POST_TEXT\", newText} as const\r\n}\r\nexport const AddLikeAC = (id: number, isLiked: boolean) => {\r\n    return {type: \"SN/PROFILE/ADD_LIKE\", id, isLiked} as const\r\n}\r\nexport const RemoveLikeAC = (id: number, isLiked: boolean) => {\r\n    return {type: \"SN/PROFILE/REMOVE_LIKE\", id, isLiked} as const\r\n}\r\n\r\nexport {\r\n    profileReducer\r\n}","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AddLikeAC, ProfileInitialStateType, RemoveLikeAC} from \"../../../../redux/profile-reducer\";\r\nimport {Post} from \"./Post\";\r\n\r\n//types:\r\ntype mapStateToPropsType = {\r\n    profilePage: ProfileInitialStateType\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addLike: (id: number, isLiked: boolean) => void\r\n    removeLike: (id: number, isLiked: boolean) => void\r\n}\r\n\r\n//Container Component:\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addLike: (id: number, isLiked: boolean)=>{\r\n            dispatch(AddLikeAC(id, isLiked));\r\n        },\r\n        removeLike: (id: number, isLiked: boolean)=> {\r\n            dispatch(RemoveLikeAC(id, isLiked));\r\n        }\r\n    }\r\n}\r\n\r\n//HOC:\r\nconst PostContainer = connect(mapStateToProps,mapDispatchToProps)(Post);\r\n\r\nexport {\r\n    PostContainer\r\n}","import React from \"react\";\r\nimport styles from \"./Post.module.css\"\r\n\r\n//types:\r\ntype PostPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n    isLiked: boolean\r\n    addLike: (id: number, isLiked: boolean) => void\r\n    removeLike: (id: number, isLiked: boolean) => void\r\n}\r\n\r\n//Fn Component:\r\nconst Post: React.FC<PostPropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={styles.items}>\r\n            <img src='https://cdn4.iconfinder.com/data/icons/spring-festival/512/man-512.png' alt=\"\"/>\r\n            <span>{props.message}</span>\r\n            {/*<span >♥{props.likesCount}</span>*/}\r\n            <div>\r\n            {\r\n                props.isLiked\r\n                    ? <button onClick={() => {\r\n                        props.removeLike(props.id, props.isLiked);\r\n                    }}>Liked ♥{props.likesCount}</button>\r\n                    :\r\n                    <button onClick={() => {\r\n                        props.addLike(props.id, props.isLiked);\r\n                    }}>Like ♡{props.likesCount}</button>\r\n            }\r\n            </div>\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Post\r\n}","import {AppStateType} from \"../../../redux/redux-store\";\r\nimport {ContentArea} from \"./ContentArea\";\r\nimport {AddPostAC, ProfileInitialStateType, SetNewPostTextAC} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//types:\r\ntype mapStateToPropsType = {\r\n    profilePage: ProfileInitialStateType\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    updateNewPostText: (newText: string) => void\r\n}\r\n\r\n//container component:\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(AddPostAC(newPostText));\r\n        },\r\n        updateNewPostText: (newText: string) => {\r\n            dispatch(SetNewPostTextAC(newText));\r\n        }\r\n    }\r\n}\r\n\r\n//HOC:\r\nconst ContentAreaContainer = connect(mapStateToProps, mapDispatchToProps)(ContentArea);\r\n\r\nexport {\r\n    ContentAreaContainer\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport styles from \"./ContentArea.module.css\"\r\nimport {ProfileInitialStateType} from \"../../../redux/profile-reducer\";\r\nimport {PostContainer} from \"./Post/PostContainer\";\r\n\r\n//types:\r\ntype ContentAreaPropsType = {\r\n    profilePage: ProfileInitialStateType\r\n    addPost: (newPostText: string) => void\r\n    updateNewPostText: (newText: string) => void\r\n}\r\n\r\n//function component:\r\nconst ContentArea: React.FC<ContentAreaPropsType> = (props) => {\r\n\r\n    const state = props.profilePage; //state!!!\r\n\r\n   /* let postsElements = state.posts.map(p => <Post key={p.id} message={p.message} id={p.id} likesCount={p.likesCount} />);*/\r\n    let postsElements = state.posts.map(p => <PostContainer\r\n        key={p.id}\r\n        message={p.message}\r\n        id={p.id}\r\n        likesCount={p.likesCount}\r\n        isLiked={p.isLiked}\r\n    />);\r\n\r\n    const addPostHandler = () => {\r\n        if (state.newPostText) {\r\n            props.addPost(state.newPostText);\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const newText = e.currentTarget?.value;\r\n        props.updateNewPostText(newText);\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            addPostHandler();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.postBlock}>\r\n            <textarea\r\n                value={state.newPostText}\r\n                maxLength={100000}\r\n                onChange={onChangeHandler}\r\n                placeholder={\"What's new?\"}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            <span>\r\n                <button onClick={addPostHandler}>Post</button>\r\n            </span>\r\n            <div className={styles.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    ContentArea\r\n}","import React from \"react\";\r\nimport styles from \"./Profile.module.css\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ContentAreaContainer} from \"./ContentArea/ContentAreaContainer\";\r\n\r\n//types:\r\ntype ProfilePropsType = {}\r\n\r\n//function component::\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n    return (\r\n        <div className={styles.profile}>\r\n            <ProfileInfo/>\r\n            <ContentAreaContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport\r\n{\r\n    Profile\r\n}","import React from \"react\";\r\nimport styles from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n//types:\r\ntype DialogPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\n//function component:\r\nconst DialogItem: React.FC<DialogPropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={styles.dialog + '' + styles.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    DialogItem\r\n}","import React from \"react\";\r\nimport styles from \"../Dialogs.module.css\";\r\n\r\n//types:\r\ntype MessagePropsType = {\r\n    id: number\r\n    message: string\r\n\r\n}\r\n\r\n//function component:\r\nconst Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={styles.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Message\r\n}","import {ActionType} from \"./redux-store\"\r\n\r\n//types:\r\nexport type DialogsDataType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesDataType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsInitialStateType = {\r\n    dialogs: Array<DialogsDataType>,\r\n    messages: Array<MessagesDataType>,\r\n    newMessageText: string\r\n}\r\n\r\n//initialState:\r\nconst initialState: DialogsInitialStateType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dima\"},\r\n        {id: 2, name: \"Sasha\"},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"hello\"},\r\n        {id: 2, message: \"How are you?\"},\r\n    ],\r\n    newMessageText: \"\"\r\n}\r\n\r\n//reducer:\r\nconst dialogsReducer = (state: DialogsInitialStateType = initialState, action: ActionType) => { //need to rename to dialogReducer\r\n    if (action.type === \"SN/DIALOGS/ADD_MESSAGE\") {\r\n        const stateCopy = {...state}\r\n        const newMessage: MessagesDataType = {\r\n            id: Math.floor(new Date().valueOf() * Math.random()), //Create a unique number with javascript time\r\n            message: stateCopy.newMessageText,\r\n        };\r\n        stateCopy.messages = [...state.messages, newMessage];\r\n        stateCopy.newMessageText = \"\";\r\n        return stateCopy;\r\n\r\n    } else if (action.type === \"SN/DIALOGS/SET_NEW_MESSAGE_TEXT\") {\r\n        const stateCopy = {...state};\r\n        stateCopy.newMessageText = action.newText;\r\n        return stateCopy;\r\n\r\n    } else {\r\n        return state;\r\n    }\r\n}\r\n\r\n//action creators:\r\nexport const AddMessageAC = (newMessage: string) => {\r\n    return {type: \"SN/DIALOGS/ADD_MESSAGE\", newMessage} as const\r\n}\r\nexport const SetNewMessageTextAC = (newText: string) => {\r\n    return {type: \"SN/DIALOGS/SET_NEW_MESSAGE_TEXT\", newText} as const\r\n}\r\n\r\nexport {\r\n    dialogsReducer\r\n}","import {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {AddMessageAC, DialogsInitialStateType, SetNewMessageTextAC} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//types:\r\ntype mapStateToPropsType = {\r\n    dialogsPage: DialogsInitialStateType\r\n}\r\ntype mapDispatchToPropsType = {\r\n    sendMessage: (newMessageText: string) => void\r\n    updateNewMessageText: (newText: string) => void\r\n}\r\n\r\n//container component:\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageText: string) => {\r\n            dispatch(AddMessageAC(newMessageText));\r\n        },\r\n        updateNewMessageText: (newText: string) => {\r\n            dispatch(SetNewMessageTextAC(newText));\r\n\r\n        }\r\n    }\r\n}\r\n\r\n//HOC:\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport {\r\n    DialogsContainer\r\n}\r\n\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport styles from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsInitialStateType} from \"../../redux/dialogs-reducer\";\r\n\r\n//types:\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogsInitialStateType\r\n    sendMessage: (newMessageText: string) => void\r\n    updateNewMessageText: (newText: string) => void\r\n}\r\n\r\n//function component:\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    const state = props.dialogsPage; // state!!!\r\n\r\n    let dialogElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>);\r\n    let messageElements = state.messages.map(m => <Message key={m.id} message={m.message} id={m.id}/>);\r\n\r\n    const addMessageHandler = () => {\r\n        if (state.newMessageText) {\r\n            props.sendMessage(state.newMessageText.trim());\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const newText = e.currentTarget?.value;\r\n        props.updateNewMessageText(newText);\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            addMessageHandler();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dialogsPage}>\r\n\r\n            <div className={styles.dialogs}>\r\n                {\r\n                    dialogElements\r\n                }\r\n            </div>\r\n\r\n            <div className={styles.messages}>\r\n                {\r\n                    messageElements\r\n                }\r\n                <div>\r\n                    <hr/>\r\n                    <textarea\r\n                        value={state.newMessageText}\r\n                        maxLength={100000}\r\n                        onChange={onChangeHandler}\r\n                        placeholder={\"Write something\"}\r\n                        onKeyPress={onKeyPressHandler}\r\n                    />\r\n                    <span>\r\n                        <button onClick={addMessageHandler}>Send</button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Dialogs\r\n}\r\n","import React from \"react\";\r\n\r\n//types:\r\ntype MusicPropsType = {}\r\n\r\n//function component:\r\nconst Music: React.FC<MusicPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            Music Page Content\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Music\r\n}","import React from \"react\";\r\n\r\n//types:\r\ntype NewsPropsType = {}\r\n\r\n//function component:\r\nconst News: React.FC<NewsPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            News Page Content\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    News\r\n}","import React from \"react\";\r\n\r\n//types:\r\ntype SettingsPropsType = {}\r\n\r\n//function component:\r\nconst Settings: React.FC<SettingsPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            Settings Page Content\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Settings\r\n}","import {ActionType} from \"./redux-store\";\r\n\r\n//types:\r\ntype LocationType = {\r\n    country: string\r\n    city: string\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UsersType = {\r\n    id: number\r\n    followed: boolean\r\n    photos: PhotosType\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\nexport type UsersInitialStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n}\r\n\r\n//initialState:\r\nconst initialState: UsersInitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 19,\r\n    currentPage: 2\r\n}\r\n\r\n//reducer:\r\nconst usersReducer = (state: UsersInitialStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"SN/USERS/FOLLOW\": {\r\n            let stateCopy = {\r\n                ...state, users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case \"SN/USERS/UNFOLLOW\": {\r\n            let stateCopy = {\r\n                ...state, users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case \"SN/USERS/SET_USERS\": {\r\n            return {...state, users: [ ...action.users]} //need to return {...state, users: [...state.users, ...action.users]}\r\n        }\r\n        case \"SN/USERS/SET_CURRENT_PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case \"SN/USERS/SET_TOTAL_USERS_COUNT\": {\r\n            return {...state, totalUsersCount: action.totalCount}\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n//action creators:\r\nexport const FollowAC = (id: number) => {\r\n    return {type: \"SN/USERS/FOLLOW\", id} as const\r\n}\r\nexport const UnFollowAC = (id: number) => {\r\n    return {type: \"SN/USERS/UNFOLLOW\", id} as const\r\n}\r\nexport const SetUsersAC = (users: Array<UsersType>) => {\r\n    return {type: \"SN/USERS/SET_USERS\", users} as const\r\n}\r\nexport const SetCurrentPageAC = (currentPage: number) => {\r\n    return{type: \"SN/USERS/SET_CURRENT_PAGE\", currentPage} as const\r\n}\r\nexport const SetTotalUsersCountAC = (totalCount: number) => {\r\n    return{type: \"SN/USERS/SET_TOTAL_USERS_COUNT\", totalCount} as const\r\n}\r\n\r\nexport {\r\n    usersReducer\r\n}","export default __webpack_public_path__ + \"static/media/defaultSmallUserPhoto.8101612b.png\";","import React from \"react\";\r\nimport {UsersInitialStateType, UsersType} from \"../../redux/users-reducer\";\r\nimport axios from \"axios\";\r\nimport defaultSmallUserPhoto from \"../../ assets/images/defaultSmallUserPhoto.png\"\r\nimport styles from \"./Users.module.css\";\r\n\r\n//types:\r\ntype UsersPropsType = {\r\n    usersPage: UsersInitialStateType\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n\r\n    //callBackTypes (mapDispatchToPropsType):\r\n    follow: (id: number) => void\r\n    unFollow: (id: number) => void\r\n    setUsers: (users: Array<UsersType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n}\r\n\r\n//class component:\r\nclass UsersClassComponent extends React.Component<UsersPropsType, any> {\r\n\r\n    componentDidMount() {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\r\n            this.props.setUsers(response.data.items);\r\n            this.props.setTotalUsersCount(response.data.totalCount)\r\n        });\r\n    }\r\n\r\n    //onPageChanged Fn for pagination:\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\r\n            this.props.setUsers(response.data.items);\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const state = this.props.usersPage; //state!!!\r\n\r\n        //pages for pagination:\r\n        const pagesCount = Math.ceil(state.totalUsersCount / state.pageSize) //.ceil rounds a number up to the next largest integer\r\n        const pages = []\r\n        for (let i = 1; i <= pagesCount; i++) {\r\n            pages.push(i)\r\n        }\r\n\r\n        return (\r\n\r\n            <div className={styles.items}>\r\n                Users:\r\n\r\n                <div>\r\n                    { //paginator:\r\n                        pages.map(p => <span\r\n                            className={p === state.currentPage\r\n                                ? styles.selectedPage\r\n                                : ''\r\n                            }\r\n                            onClick={()=>this.onPageChanged(p)} //callBack?\r\n                        >{p}</span>)\r\n                    }\r\n                </div>\r\n\r\n                <hr/>\r\n                {\r\n                    state.users.map(u => <div key={u.id}>\r\n                        <div>\r\n                            <img src={\r\n                                u.photos.small !== null\r\n                                    ? u.photos.small\r\n                                    : defaultSmallUserPhoto //defaultAsset\r\n                            }/>\r\n                        </div>\r\n                        <div><b>{u.name}</b></div>\r\n                        <div style={{textDecoration: \"underline\", color: \"blue\"}}>{\"Write message\"}</div> {/*//need to fix*/}\r\n                        <div>\r\n                            {\r\n                                u.followed\r\n                                    ?\r\n                                    <button onClick={() => {\r\n                                        this.props.unFollow(u.id);\r\n                                    }}>unfollow</button>\r\n                                    :\r\n                                    <button onClick={() => {\r\n                                        this.props.follow(u.id);\r\n                                    }}>follow</button>\r\n                            }\r\n                        </div>\r\n\r\n                        {/*description of location:*/}\r\n                        <div>{\"country:\"}\r\n                            {\r\n                                u.location?.country //missed value\r\n                                    ? u.location.country\r\n                                    : \" - \"\r\n                            }\r\n                        </div>\r\n                        <div>{\"city:\"}\r\n                            {\r\n                                u.location?.city //missed value\r\n                                    ? u.location.city\r\n                                    : \" - \"\r\n                            }\r\n                        </div>\r\n\r\n                        <hr/>\r\n                    </div>)\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport {\r\n    UsersClassComponent\r\n}","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    FollowAC,\r\n    SetCurrentPageAC, SetTotalUsersCountAC,\r\n    SetUsersAC,\r\n    UnFollowAC,\r\n    UsersInitialStateType,\r\n    UsersType\r\n} from \"../../redux/users-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {UsersClassComponent} from \"./UsersClassComponent\";\r\n\r\n//types:\r\ntype mapStateToPropsType = {\r\n    usersPage: UsersInitialStateType\r\n    pageSize: number //rudiment???\r\n    totalUsersCount: number //rudiment???\r\n    currentPage: number //rudiment???\r\n}\r\ntype mapDispatchToPropsType = {\r\n    follow: (id: number) => void\r\n    unFollow: (id: number) => void\r\n    setUsers: (users: Array<UsersType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n}\r\n\r\n//container component:\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        usersPage: state.usersPage,\r\n        pageSize: state.usersPage.pageSize, //rudiment???\r\n        totalUsersCount: state.usersPage.totalUsersCount, //rudiment???\r\n        currentPage: state.usersPage.currentPage //rudiment???\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n\r\n    return {\r\n        follow: (id: number) => {\r\n            dispatch(FollowAC(id));\r\n        },\r\n        unFollow: (id: number) => {\r\n            dispatch(UnFollowAC(id));\r\n        },\r\n        setUsers: (users: Array<UsersType>) => {\r\n            dispatch(SetUsersAC(users));\r\n        },\r\n        setCurrentPage: (pageNumber: number) => {\r\n            dispatch(SetCurrentPageAC(pageNumber));\r\n        },\r\n        setTotalUsersCount: (totalCount: number) => {\r\n            dispatch(SetTotalUsersCountAC(totalCount));\r\n        }\r\n    }\r\n}\r\n\r\n//HOC:\r\nconst UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersClassComponent);\r\n\r\nexport {\r\n    UsersContainer\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\nimport {Profile} from \"./components/Profile/Profile\";\r\nimport {Route} from \"react-router-dom\";\r\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\r\nimport {Music} from \"./components/Music/Music\";\r\nimport {News} from \"./components/News/News\";\r\nimport {Settings} from \"./components/Settings/Settings\";\r\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\r\n\r\n//types:\r\ntype AppPropsType = {}\r\n\r\n//function component:\r\nconst App: React.FC< AppPropsType> = (props)=> {\r\n    return (\r\n\r\n        <div className=\"app-wrapper\">\r\n            <Header/>\r\n            <Navbar/>\r\n            <div className={\"app-wrapper-content\"}>\r\n                <Route path={\"/Profile\"} render={() => <Profile/>}/>\r\n                <Route path={\"/Dialogs\"} render={() => <DialogsContainer/>}/>\r\n                <Route path={\"/Users\"} render={() => <UsersContainer/>}/>\r\n                <Route path={\"/News\"} render={() => <News/>}/>\r\n                <Route path={\"/Music\"} render={() => <Music/>}/>\r\n                <Route path={\"/Settings\"} render={() => <Settings/>}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {AddMessageAC, dialogsReducer, SetNewMessageTextAC} from \"./dialogs-reducer\";\r\nimport {AddLikeAC, AddPostAC, profileReducer, RemoveLikeAC, SetNewPostTextAC} from \"./profile-reducer\";\r\nimport {FollowAC, SetCurrentPageAC, SetTotalUsersCountAC, SetUsersAC, UnFollowAC, usersReducer} from \"./users-reducer\";\r\n\r\n//types:\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\nexport type RootReduxStoreType = typeof store;\r\nexport type ActionType = ReturnType<typeof AddPostAC>\r\n    | ReturnType<typeof SetNewPostTextAC>\r\n    | ReturnType<typeof AddLikeAC>\r\n    | ReturnType<typeof RemoveLikeAC>\r\n    | ReturnType<typeof AddMessageAC>\r\n    | ReturnType<typeof SetNewMessageTextAC>\r\n    | ReturnType<typeof FollowAC>\r\n    | ReturnType<typeof UnFollowAC>\r\n    | ReturnType<typeof SetUsersAC>\r\n    | ReturnType<typeof SetCurrentPageAC>\r\n    | ReturnType<typeof SetTotalUsersCountAC>\r\n\r\n//store & rootReducer:\r\nexport const rootReducer = combineReducers({\r\n    dialogPage: dialogsReducer,\r\n    profilePage: profileReducer,\r\n    usersPage: usersReducer\r\n});\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport {\r\n    store\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport {AppStateType} from './redux/redux-store';\r\nimport {store} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nconst reRenderEntireThree = (state: AppStateType) => {\r\n\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <BrowserRouter>\r\n                <Provider store={store}>\r\n                    <App/>\r\n                </Provider>\r\n            </BrowserRouter>\r\n        </React.StrictMode>\r\n        ,document.getElementById('root')\r\n    );\r\n}\r\n\r\nreRenderEntireThree(store.getState());\r\nstore.subscribe(() => {\r\n    reRenderEntireThree(store.getState())\r\n});\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}