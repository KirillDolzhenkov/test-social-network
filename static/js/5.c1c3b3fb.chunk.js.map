{"version":3,"sources":["assets/images/default_user_photo.png","components/common/FormControls/FormControls.module.css","utils/validator.ts","components/common/FormControls/FormControls.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","selectors/dialogs-selectors.ts","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","requiredField","value","maxLengthCreator","maxValue","length","FormControl","input","meta","props","formControlValue","isError","touched","error","FormElement","className","styles","formControl","mapStateToProps","state","isAuth","auth","WithAuthRedirect","Component","connect","restProps","to","DialogItem","id","name","style","dialog","active","Message","message","time","img","alt","src","defaultAvatar","content","text","Dialogs","dialogsPage","addMessage","dialogElements","dialogs","map","d","messageElements","messages","m","AddMessageReduxForm","onSubmit","e","currentTarget","maxLength3","reduxForm","form","handleSubmit","inputAreaElements","Field","placeholder","component","validate","getDialogsSL","dialogPage","DialogsClassContainer","this","React","DialogsContainer","compose"],"mappings":"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","file":"static/js/5.c1c3b3fb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/default_user_photo.5364f1ba.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__1PKUq\",\"error\":\"FormControls_error__3kHja\",\"formSummaryError\":\"FormControls_formSummaryError__2VRhK\"};","//checking that а field are not empty:\r\nexport const requiredField = (value: any) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\n//checking that а field has not much length than required:\r\nexport const maxLengthCreator = (maxValue: any) => {\r\n    return function (value: any) {\r\n        if (value && value.length > maxValue) return `Max length is ${maxValue} symbols`;\r\n        return undefined;\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nimport styles from \"./FormControls.module.css\"\r\n\r\n//types:\r\ntype FormControlType = { input: any, meta: any, formControlValue: string} //need to fix any fnd check types!!! (meta has: touched, error...)\r\n\r\n//functional component:\r\nconst  FormControl: React.FC<FormControlType> = ({input, meta, ...props}) => {\r\n\r\n    const {\r\n        formControlValue,\r\n    } = props;\r\n\r\n    //if field is touched activate error\r\n    const isError = meta.touched && meta.error;\r\n    const FormElement = formControlValue;\r\n\r\n    return (\r\n        <div className={ isError && `${styles.formControl} ${styles.error}`}>\r\n            <div>\r\n                <FormElement {...input} {...props}/>\r\n            </div>\r\n            {isError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    FormControl\r\n}","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport { AppStateType } from \"../redux/redux-store\";\n\n//types:\ntype mapStateToPropsType = {\n  isAuth: boolean;\n};\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n  return {\n    isAuth: state.auth.isAuth,\n  };\n};\n\n\n//container component:\nfunction WithAuthRedirect<T>(Component: React.ComponentType<T>) { //possible to make arrow function?\n\n  const RedirectComponent: React.FC<mapStateToPropsType> = (props) => {\n\n    const {\n      isAuth,\n      ...restProps\n    } = props;\n\n    if (!isAuth) {\n      return <Redirect to={\"/Login\"}/>\n    }\n    return <Component {...(restProps as T)} />\n  };\n\n  return connect(mapStateToProps)(RedirectComponent)\n}\n\nexport {\n  WithAuthRedirect\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsPage\":\"Dialogs_dialogsPage__30RqF\",\"dialogs\":\"Dialogs_dialogs__hPjJa\",\"dialog\":\"Dialogs_dialog__3R01s\",\"messages\":\"Dialogs_messages__2b5iv\",\"messageElements\":\"Dialogs_messageElements__BpFaC\",\"inputAreaElements\":\"Dialogs_inputAreaElements__1GU_0\",\"message\":\"Dialogs_message__2JtN6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1pl0m\",\"content\":\"Message_content__28Hls\",\"name\":\"Message_name__gkaLH\",\"text\":\"Message_text__1FzPC\",\"time\":\"Message_time__322cI\"};","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nimport style from \"../Dialogs.module.css\";\n\n//types:\ntype DialogPropsType = {\n    id: number\n    name: string\n}\n\n//functional component:\nconst DialogItem: React.FC<DialogPropsType> = (props) => {\n\n    const {\n        id,\n        name,\n    } = props;\n\n    return (\n        <div className={style.dialog + '' + style.active}>\n            <NavLink to={\"/dialogs/\" + id}>{name}</NavLink>\n        </div>\n    )\n}\n\nexport {\n    DialogItem\n}","import React from \"react\";\n\nimport styles from \"./Message.module.css\";\nimport defaultAvatar from \"../../../assets/images/default_user_photo.png\"\n\n//types:\ntype MessagePropsType = {\n    id: number //?\n    message: string\n    time: string\n}\n\n//function component:\nconst Message: React.FC<MessagePropsType> = (props) => {\n\n    const {\n        id, //?\n        message,\n        time,\n    } = props;\n\n    return (\n        <div className={styles.message}>\n            <img className={styles.img} alt=\"userPhoto\" src={defaultAvatar}/>\n            <div className={styles.content}>\n                <div className={styles.name}>userName</div>\n                <div className={styles.text}>{message}</div>\n                <div className={styles.time}>{time}</div>\n            </div>\n        </div>\n\n    )\n}\n\nexport {\n    Message\n}","import React from \"react\";\nimport {Field, reduxForm} from \"redux-form\";\n\nimport styles from \"./Dialogs.module.css\"\nimport {DialogsInitialStateType} from \"../../redux/dialogs-reducer\";\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport {FormControl} from \"../common/FormControls/FormControls\";\nimport {maxLengthCreator, requiredField} from \"../../utils/validator\";\n\n\n//types:\ntype confPropsType = {\n    form: string\n}\n\ntype AddMessageFormPropsType = any //need to fix any!!!\ntype DialogsPropsType = {\n    dialogsPage: DialogsInitialStateType\n    addMessage: (/*newId: number,*/ newMessageText: string, /*newDate: string*/) => void\n    /*newId: number\n    newDate: string */\n}\n\n//functional component:\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\n\n    const {\n        dialogsPage,\n        addMessage,\n        /*newId,\n        newDate,*/\n    } = props;\n\n    //users list:\n    let dialogElements = dialogsPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>);\n\n    //messages history:\n    let messageElements = dialogsPage.messages.map(m => <Message key={m.id} message={m.message} id={m.id} time={m.time}/>);\n\n    const addNewMessage = (e: React.ChangeEvent<HTMLInputElement>) => { //need to fix any!!!\n        if (e.currentTarget.value) {\n            addMessage(e.currentTarget.value);\n        }\n    }\n\n    return (\n        <div className={styles.dialogsPage}>\n            <div className={styles.dialogs}>\n                {\n                    dialogElements\n                }\n            </div>\n            <div className={styles.messages}>\n                <div className={styles.messageElements}>\n                    {\n                        messageElements\n                    }\n                </div>\n                <hr/>\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    )\n}\n\nconst maxLength3 = maxLengthCreator(3);//test value!!!\n\n//functional component:\nconst AddMessageForm: React.FC<AddMessageFormPropsType> = (props) => {\n\n    const {\n        handleSubmit,\n    } = props;\n\n    return (\n        <form onSubmit={handleSubmit} className={styles.inputAreaElements}> {/* <--need to rename class*/}\n            <div>\n                <Field\n                    placeholder={\"Write something\"}\n                    name={\"newMessageText\"}\n                    component={FormControl}\n                    formControlValue={\"textarea\"}\n                    validate={[requiredField, maxLength3]}\n                />\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\n//reduxForm HOC:\nconst AddMessageReduxForm = reduxForm<confPropsType,any>({form: 'profileAddPostReduxForm'})(AddMessageForm); //need to check types & fix any !!!\n\nexport {\n    Dialogs\n}\n","import {AppStateType} from \"../redux/redux-store\";\r\n\r\nexport const getDialogsSL = (state: AppStateType) => {\r\n    return state.dialogPage\r\n}","import React from \"react\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\n\nimport {\n    addMessage,\n    DialogsInitialStateType,\n} from \"../../redux/dialogs-reducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport { Dialogs } from \"./Dialogs\";\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\nimport {getDialogsSL} from \"../../selectors/dialogs-selectors\";\n\n//types:\ntype mapStateToPropsType = {\n    dialogsPage: DialogsInitialStateType\n}\n\ntype mapDispatchToPropsType = {\n    addMessage: (/*newId: number,*/ newMessageText: string, /*newDate: string*/) => void\n}\ntype DialogsClassContainerPropsType = mapStateToPropsType & mapDispatchToPropsType;\n\n//need to fix! (sideEffects):\n/*const createId = () => {\n    return Math.floor(new Date().valueOf() * Math.random()); //Creating a unique number with javascript time method\n}\nconst createDate = () => {\n    return new Date().toLocaleString(); //Get Current Date & Time function\n}*/\n\n//mapStateToProps & class container component:\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        dialogsPage: getDialogsSL(state),\n    }\n}\n\nclass DialogsClassContainer extends React.Component<DialogsClassContainerPropsType> {\n\n    render(){\n        return(\n            <Dialogs\n                {...this.props}\n                /*newId={createId()}\n                newDate={createDate()}*/\n            />\n        )\n    }\n}\n\n//HOC:\nconst DialogsContainer = compose<React.FC>(\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(\n        mapStateToProps, {addMessage, }),\n    WithAuthRedirect,\n)(DialogsClassContainer);\n\nexport {\n    DialogsContainer\n}\n\n\n"],"sourceRoot":""}